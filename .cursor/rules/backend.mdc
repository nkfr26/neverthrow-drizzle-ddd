---
description: 
globs: 
alwaysApply: true
---
# バックエンドコーディングルール

## 使用技術

- TypeScript
- neverthrow
- Drizzle

## 実装パターン

### ディレクトリ構成例

- フレームワークに依存しない
- `packages` 内の `index.ts` はディレクトリ内の関数をまとめて `export` し直す

```
src
├─ index.ts
└─ packages
   ├─ domain
   │  ├─ branded.ts
   │  ├─ errors.ts
   │  └─ user
   │     ├─ model
   │     │  ├─ index.ts
   │     │  ├─ user-id.ts
   │     │  ├─ user-name.ts
   │     │  └─ user.ts
   │     └─ service
   │        └─ user-exists.ts
   ├─ infrastructure
   │  ├─ drizzle-client.ts
   │  ├─ errors.ts
   │  ├─ schema.ts
   │  └─ user
   │     ├─ delete-user-command.ts
   │     ├─ index.ts
   │     ├─ insert-user-command.ts
   │     ├─ select-user-query.ts
   │     └─ update-user-command.ts
   └─ use-case
      └─ user
         ├─ delete-user.ts
         ├─ errors.ts
         ├─ get-all-users.ts
         ├─ register-user.ts
         └─ update-user.ts
```

```typescript
export * from "./user";
export * from "./user-id";
export * from "./user-name";
```

### Branded Types

```typescript
declare const __brand: unique symbol;

export type Branded<Type, Constructor> = Type & {
  readonly [__brand]: Constructor;
};
```

### エラー

```typescript
export class ValidationError extends Error {
  readonly type = "ValidationError";
}
```

### 値オブジェクト

- 不変である
- 交換が可能である
- 等価性によって比較される
- 紐付くふるまいは型定義の下に置く

```typescript
import { type Result, err, ok } from "neverthrow";
import type { Branded } from "../../branded";
import { ValidationError } from "../../errors";

export type UserName = Branded<string, "UserName">;

export const UserName = (value: string): Result<UserName, ValidationError> => {
  if (value.length < 3) {
    return err(new ValidationError("ユーザー名は3文字以上です。"));
  }
  return ok(value as UserName);
};
```

### エンティティ

- オブジェクトの変更は「関数適用による状態遷移」として実装する
- 同じ属性であっても区別される
- 同一性をもつ
- 紐付くふるまいは型定義の下に置く

```typescript
import type { UserId } from "./user-id";
import type { UserName } from "./user-name";

export type User = Readonly<{
  id: UserId;
  name: UserName;
}>;

export const User = (id: UserId, name: UserName): User => ({
  id,
  name,
});

export const changeUserName = (user: User, name: UserName) => ({
  ...user,
  name,
});
```

### DBクライアントの型

```typescript
import type { ExtractTablesWithRelations } from "drizzle-orm";
import type { PgTransaction } from "drizzle-orm/pg-core";
import type {
  PostgresJsDatabase,
  PostgresJsQueryResultHKT,
} from "drizzle-orm/postgres-js";
import type postgres from "postgres";

export type DrizzleClient =
  | (PostgresJsDatabase<Record<string, never>> & {
      $client: postgres.Sql;
    })
  | PgTransaction<
      PostgresJsQueryResultHKT,
      Record<string, never>,
      ExtractTablesWithRelations<Record<string, never>>
    >;
```

### DBスキーマ

```typescript
import { pgTable, text, uuid } from "drizzle-orm/pg-core";

export const usersTable = pgTable("users", {
  userId: uuid("user_id").primaryKey(),
  name: text("name").notNull().unique(),
});

export type UserDataModel = typeof usersTable.$inferSelect;
```

### コマンド・クエリ

- 永続化
- 再構築
- 各I/Oアクセスごとに個別の関数を定義

```typescript
import { eq } from "drizzle-orm";
import { ResultAsync } from "neverthrow";
import type { User } from "../../domain/user/model";
import type { DrizzleClient } from "../drizzle-client";
import { DbClientError } from "../errors";
import { usersTable } from "../schema";

export const updateUserCommand = (db: DrizzleClient) => (user: User) =>
  ResultAsync.fromPromise(
    db
      .update(usersTable)
      .set({ name: user.name })
      .where(eq(usersTable.userId, user.id)),
    (e) => new DbClientError("データベース接続確立エラー", { cause: e }),
  );
export type UpdateUserCommand = ReturnType<typeof updateUserCommand>;
```

```typescript
import { eq } from "drizzle-orm";
import { Result, ResultAsync, ok, safeTry } from "neverthrow";
import { User, UserId, UserName } from "../../domain/user/model";
import type { DrizzleClient } from "../drizzle-client";
import { DbClientError } from "../errors";
import { type UserDataModel, usersTable } from "../schema";

export const selectUserByIdQuery = (db: DrizzleClient) => (id: UserId) =>
  ResultAsync.fromPromise(
    db.select().from(usersTable).where(eq(usersTable.userId, id)),
    (e) => new DbClientError("データベース接続確立エラー", { cause: e }),
  ).andThen((userDataModels) =>
    userDataModels.length ? toModel(userDataModels[0]) : ok(undefined),
  );
export type SelectUserByIdQuery = ReturnType<typeof selectUserByIdQuery>;

export const selectAllUsersQuery = (db: DrizzleClient) => () =>
  ResultAsync.fromPromise(
    db.select().from(usersTable),
    (e) => new DbClientError("データベース接続確立エラー", { cause: e }),
  ).andThen((userDataModels) => Result.combine(userDataModels.map(toModel)));
export type SelectAllUsersQuery = ReturnType<typeof selectAllUsersQuery>;

const toModel = (from: UserDataModel) =>
  safeTry(function* () {
    return ok(User(yield* UserId(from.userId), yield* UserName(from.name)));
  });
```

### ドメインサービス

- 値オブジェクトやエンティティに記述すると不自然なふるまいを定義する
- インフラストラクチャが絡む場合はコマンド・クエリを高階関数としてDIする

```typescript
import type { SelectUserByNameQuery } from "../../../infrastructure/user";
import type { User } from "../model";

export const userExists =
  (selectUserByNameQuery: SelectUserByNameQuery) => (user: User) =>
    selectUserByNameQuery(user.name).map(
      (duplicateUser) => duplicateUser !== undefined,
    );
export type UserExists = ReturnType<typeof userExists>;
```

### ユースケース

- ドメインオブジェクトを組み合わせて実行する
- コマンド・クエリや部分適用されたドメインサービスを高階関数として使用する順番にDIする

```typescript
import { err, safeTry } from "neverthrow";
import { v7 as uuidv7 } from "uuid";
import { UserId, UserName } from "../../domain/user/model";
import { User } from "../../domain/user/model/user";
import type { UserExists } from "../../domain/user/service/user-exists";
import type { InsertUserCommand } from "../../infrastructure/user";
import { CanNotRegisterUserError } from "./errors";

export const registerUser =
  (userExists: UserExists, insertUserCommand: InsertUserCommand) =>
  (name: string) =>
    safeTry(async function* () {
      // ユーザーの生成
      const user = User(yield* UserId(uuidv7()), yield* UserName(name));

      // ユーザーの重複確認
      const exists = yield* userExists(user);
      if (exists) {
        return err(
          new CanNotRegisterUserError("ユーザーは既に存在しています。"),
        );
      }

      // ユーザーの作成
      return insertUserCommand(user);
    });
```

```typescript
import { err, safeTry } from "neverthrow";
import { UserId, UserName } from "../../domain/user/model";
import { changeUserName } from "../../domain/user/model/user";
import type { UserExists } from "../../domain/user/service/user-exists";
import type {
  SelectUserByIdQuery,
  UpdateUserCommand,
} from "../../infrastructure/user";
import { CanNotRegisterUserError, UserNotFoundError } from "./errors";

export const updateUser =
  (
    selectUserByIdQuery: SelectUserByIdQuery,
    userExists: UserExists,
    updateUserCommand: UpdateUserCommand,
  ) =>
  (id: string, name: string) =>
    safeTry(async function* () {
      // ユーザーIDのバリデーション
      const userId = yield* UserId(id);

      // ユーザーの存在確認
      const user = yield* selectUserByIdQuery(userId);
      if (user === undefined) {
        return err(new UserNotFoundError("ユーザーが見つかりませんでした。"));
      }

      // ユーザー名のバリデーション
      const userName = yield* UserName(name);

      // ユーザー名の変更
      const updatedUser = changeUserName(user, userName);

      // ユーザーの重複確認
      const exists = yield* userExists(updatedUser);
      if (exists) {
        return err(new CanNotRegisterUserError("ユーザーは既に存在しています。"));
      }

      // ユーザーの更新
      return updateUserCommand(updatedUser);
    });
```

### 使用例

```typescript
import { serve } from "@hono/node-server";
import { drizzle } from "drizzle-orm/postgres-js";
import { Hono } from "hono";
import postgres from "postgres";
import { env } from "../env";
import type { DrizzleClient } from "./packages/infrastructure/drizzle-client";
import { userExists } from "./packages/domain/user/service/user-exists";
import {
  selectUserByIdQuery,
  selectUserByNameQuery,
  updateUserCommand,
} from "./packages/infrastructure/user";
import { updateUser } from "./packages/use-case/user/update-user";

const app = new Hono<{ Variables: { db: DrizzleClient } }>()
  .use(async (c, next) => {
    c.set("db", drizzle({ client: postgres(env.DATABASE_URL) }));
    await next();
  })
  .get("/db", (c) => {
    return updateUser(
      selectUserByIdQuery(c.get("db")),
      userExists(selectUserByNameQuery(c.get("db"))),
      updateUserCommand(c.get("db")),
    )("01966267-cd4a-71e6-8e52-81fe463d0b5f", "hoge").match(
      (value) => c.json(value),
      (error) => c.json(error),
    );
  })
  .get("/tx", async (c) => {
    return c
      .get("db")
      .transaction((tx) =>
        updateUser(
          selectUserByIdQuery(tx),
          userExists(selectUserByNameQuery(tx)),
          updateUserCommand(tx),
        )("01966267-cd4a-71e6-8e52-81fe463d0b5f", "hoge").match(
          (value) => c.json(value),
          (error) => {
            throw error;
          },
        ),
      )
      .catch((error) => c.json(error));
  });

serve(app);
```
